#!/bin/bash
#: Title:	: vpn
#: Author	: clewsy (clewsy.pro)
#: Description	: Kills any existing vnp connection then establishes a new session.  Uses openvpn.
#: Options	: -c	Cancels/kills current vpn connection without establishing new.
#:		: -k	Kills/cancles current vpn connection without establishing new.
#:		: -h	Help (print usage then exit).

## Exit codes.
SUCCESS=0
BAD_USAGE=1
BAD_CONFIG=2
NO_CURL=3
NO_IPINFO=4
OPENVPN_FAIL=5

## Colours.
RED="\033[31m"
GREEN="\033[32m"
BLUE="\033[01;34m"
BOLD="\033[01;37m"
RESET="\033[0m"

## Define the default vpn config file to be used by openvpn.
## This is ignored if the user provides an argument defining an alternate config file.
DEFAULT_CONF="/home/jc/openvpn/Windscribe-Australia_UDP.ovpn"

## Define and clear a temp file into which ipinfo.io data will be entered and then parsed.
TEMP_FILE="/tmp/vpn_tempfile"
> "${TEMP_FILE}"

USAGE="
Usage: ${0##*/} <option> [openvpn config file]
Valid options:
	-c	Cancel running vpn. (Same as -k)
	-k	Kill running vpn. (Same as -c)
	-h	Help - Print this usage and exit.
If no openvpn config file is entered, the default will be used (${DEFAULT_CONF}). 
"
##########Interpret options
while getopts 'ckh' OPTION; do
	case "$OPTION" in
		c|k)	printf "%b" "\nCancelling vpn.\n\n"	## -c (cancel) or -k (kill) will kill any running openvpn instance.
			sudo pkill openvpn
			exit ${SUCCESS};;
		h)	printf "%b" "${USAGE}\n"		## -h option just prints the usage then quits.
			exit ${SUCCESS};;			## Exit successfully.
		?)	printf "%b" "Invalid option/s.\n${USAGE}\n"
			exit ${BAD_USAGE};;
	esac
done
shift $((OPTIND -1))	## This ensures only non-option arguments are considered arguments when referencing $#, #* and $n.

##########Check correct usage
case $# in
	0|1)	;;	## Theres should be 0 or 1 argument/s.
	*)	printf "%b" "\n${RED}Error${RESET}: Too many arguments.  Quitting.\n${USAGE}\n"
		exit ${BAD_USAGE};;
esac

##########Define openvpn config file.
VPN_FILE=${1-"${DEFAULT_CONF}"}	## First argument is the openvpn config file.  If not provided, set default.

##########Validate openvpn config file.
if [ ! -f "${VPN_FILE}" ]; then	## If file is not a regular file or is missing.
	printf "%b" "\n${RED}Error${RESET}: Invalid openvpn config file.  Quitting.\n${USAGE}\n"
	exit ${BAD_CONFIG}
fi

##########Ensure curl is installed.
if ! command -v curl > /dev/null; then
	printf "%b" "\n${RED}Error${RESET}: curl is not installed.  Quitting.\n\n"
	exit ${NO_CURL}
fi

##########Kill current openvpn instance before creating new.
printf "%b" "\nKilling any running instances of openvpn.\n\n"
sudo pkill openvpn

##########Download current data from ipinfo.io into TEMP_FILE (this is the info without the vpn active).
if ! curl --silent --connect-timeout 5 --max-time 10 --output "${TEMP_FILE}" ipinfo.io ; then
	printf "%b" "${RED}Error${RESET}: Failed to pull data from \"ipinfo.io\".  Quitting...\n\n"
	exit ${NO_IPINFO}
fi

##########Parse specific details from the temp file.
CURRENT_IP=$(grep -m 1 "ip" "${TEMP_FILE}" | cut -d ":" -f 2 | cut -d "\"" -f 2)
CURRENT_CITY=$(grep "city" "${TEMP_FILE}" | cut -d ":" -f 2 | cut -d "\"" -f 2)

##########Print out the current ip and city (without vpn).
printf "%15b%b" "Current ip : " "${BOLD}${CURRENT_IP}${RESET}\n"
printf "%15b%b" "Current city : " "${BOLD}${CURRENT_CITY}${RESET}\n"

##########Connect to the vpn.
printf "%b" "\nRunning openvpn using config file at \"${BLUE}${VPN_FILE}${RESET}\"\n"
printf "%b" "\"${0##*/} -c\" to cancel/kill vpn.\n"
if ! sudo openvpn --config "${VPN_FILE}" --daemon ; then	## Execute openvpn. Exit script if it fails.
	rm "${TEMP_FILE}"
	printf "%b" "\n${RED}Error:${RESET} openvpn failed. Quitting\n\n"
	exit ${OPENVPN_FAIL}
fi

##########Loop until the vpn is active - determined by a change in the ip.
NEW_IP=${CURRENT_IP}
while [ "${NEW_IP}" = "${CURRENT_IP}" ]
do
	if ! curl --silent --connect-timeout 5 --max-time 10 --output "${TEMP_FILE}" ipinfo.io ; then
		rm "$TEMP_FILE"
		printf "%b" "\n${RED}Error${RESET}: Failed to pull data from \"ipinfo.io\".  Quitting...\n\n"
		exit ${NO_IPINFO}
	fi
	NEW_IP=$(grep -m 1 "ip" "${TEMP_FILE}" | cut -d ":" -f 2 | cut -d "\"" -f 2)
done
NEW_CITY=$(grep "city" "$TEMP_FILE" | cut -d ":" -f 2 | cut -d "\"" -f 2)

##########Print out the new apparent ip & city.
printf "%b" "\n${GREEN}Connected.${RESET}\n\n"
printf "%11b%b" "New ip : " "${BOLD}${NEW_IP}${RESET}\n"
printf "%11b%b" "New city : " "${BOLD}${NEW_CITY}${RESET}\n\n"

##########Delete the temp file.
rm "$TEMP_FILE"

exit ${SUCCESS}
