#!/bin/bash
#: Title:	: apt_all
#: Author	: clewsy (clewsy.pro)
#: Description	: Run apt-get commands (update, dist-upgrade, autoremove then autoclean) on a selected host or list of hosts.
#: Options	: -q - Quiet mode (suppress some output).
#:		  -v - Verbose mode (show additional output).
#:		  -h - Help (print usage information).

########## Exit codes
SUCCESS=0	## Noice.
BAD_OPTION=1	## Invalid option.
TOO_MANY_ARGS=2	## Incorrect usage.
BAD_LOGFILE=3	## Unable to write to the defined logfile directory.

########## Colours and formatting.
RED="\033[02;31m"
GREEN="\033[02;32m"
BOLD="\033[01;37m"
BLUE="\033[01;34m"
RESET="\033[0m"
SEPARATOR="-------------------\n"
SEPARATOR_LARGE="------------------------------------------------------------------------------------------\n"
TABLE_WIDTH=40 ## Recommend minimum 31 to look nice.
FILL_H_f () { for ((i=1; i<=$1; i++)); do printf "%s" "═"; done; } ## Print '═' a specified number of times.

########## Function to print current date and time.  Used for logging.
TIMESTAMP_f () { date +%Y-%m-%d\ %T; }

########## Function for exit conditions.  Log error or success and exit.
QUIT_f ()
{
	if [ "${1}" -gt 0 ]; then	printf "%s%d%b" "$(TIMESTAMP_f) [X] Script failed with error code " "${1}" ".\n" >> "${APT_ALL_LOG_FILE}"
	else				printf "%b" "$(TIMESTAMP_f) [√] Script exited successfully.\n" >> "${APT_ALL_LOG_FILE}"; fi
	printf "%b" ${SEPARATOR_LARGE} >> "${APT_ALL_LOG_FILE}"
	exit "${1}"
}

########## Define log file and ensure directory exists and is writable.
APT_ALL_LOG_FILE="${HOME}/.log/apt_all.log"
if [ ! -w "$(dirname "${APT_ALL_LOG_FILE}")" ]; then
	if ! mkdir --parents "$(dirname "${APT_ALL_LOG_FILE}")" || ! touch "${APT_ALL_LOG_FILE}"; then
		printf "%b" "${RED}Error:${RESET} Unable to create/write to the logfile (${APT_ALL_LOG_FILE})\n"
		exit "${BAD_LOGFILE}";	## Don't use QUIT_f because it needs to write the logfile.
	fi
fi

########## Command help/usage.
USAGE="
Usage: ${0##*/} [hosts]
Where [hosts] can be:
	- [user@host]
	- [host]	(same user as current or defined in .ssh/config)
	- [hosts.list]	(file containing a list of [user@host] or [host]
	- ommitted	(script will look for host.list file of the name \"my_hosts.list\")
Valid options:
	-q	Quiet mode - only print the current host and the final summary.
	-v	Verbose mode - print additional info to stdout.  Overrides Quiet mode (\"-q\").
	-h	Print this usage and exit.
"

######### Default values can be changed with -q or -v options. 
DEST="/dev/null"			## Default destination for command output.  -v (verbose) option changes this.
APT_GET_VERBOSITY="--quiet=3"		## Default verbosity setting for apt-get commands.  Removed by "-v" option.
QUIET=false

######### Define array of options to be used by ssh.
SSH_OPTIONS=(	
	-4					## Use IPV4 (alternatively, -6 for IPV6).
	"-o StrictHostKeyChecking=no"		## Disable user verification for connecting to unknown (not yet authenticated) host.
	"-o UserKnownHostsFile=/dev/null"	## Disable automatically saving "newly discovered" hosts to the known_hosts file.
	"-o BatchMode=yes"			## Disable password prompts and host key confirmation requests.
	"-o ConnectTimeout=4"			## Stop attempting the connection after specified number of seconds.
)

######### Define remote path override used with sudo over ssh.
## Fixes an error that otherwise arises if sudo default PATH does not include paths of commands needed by apt-get.
## E.g. Default sudo PATH is negated on an OSMC installation by the /etc/sudoers.d/osmc-no-secure-path file.
REM_PATH_DEF="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

########## Interpret options
while getopts 'vqh' OPTION; do			## Call getopts to identify selected options and set corresponding flags.
	case "$OPTION" in
		q)	QUIET=true ;;			## Set the quiet flag to suppress certain printf commands.
		v)	DEST="/dev/stdout"		## -v activates verbose mode by sending output to /dev/stdout.
			APT_GET_VERBOSITY=""		## Verbose mode removes the "--quiet" option with apt-get commands.
			QUIET=false ;;			## Override Quiet mode option.
		h)	printf "%b" "${USAGE}\n"	## -h option just prints the usage then quits.
			QUIT_f "${SUCCESS}" ;;		## Exit successfully.
		?)	printf "%b" "${RED}Error:${RESET} Invalid option/s.\n ${USAGE}\n"	## Invalid option, show usage.
			QUIT_f "${BAD_OPTION}" ;;	## Exit with error.
	esac
done
shift $((OPTIND -1))	## This ensures only non-option arguments are considered arguments when referencing $#, #* and $n.

######### Validate provided argument/s.
if [ $# -gt 1 ]; then		## If more than one argument is entered.
	printf "%b" "${RED}Error:${RESET} Too many arguments.\n${USAGE}\n"	## Print error message and usage.
	QUIT_f "${TOO_MANY_ARGS}"	## Exit.
fi

######### Define argument or use default.
ARGUMENT=${1-"$(dirname "$0")/my_hosts.list"}	## First argument is the file name of the list of remote systems.
						## If argument not provided, set default (ball.list in same dir as script).
						## Syntax: parameter=${parameter-default}

######### Define and clear temp files.
TEMP_SUMMARY_FILE="/tmp/temp_apt_summary"
> "${TEMP_SUMMARY_FILE}"

TEMP_REM_SYS_LIST="/tmp/temp_apt_rem_sys_list"
> "${TEMP_REM_SYS_LIST}"

######### Determine the content of the specified option - i.e. a specific host or a file containing a list of hosts.
printf "%b" "\nValidating the target/s...\n" > ${DEST}
if [ ! -f "${ARGUMENT}" ] || [ ! -r "${ARGUMENT}" ]; then
	printf "%b" "Target is a specific host.\n" > ${DEST}
	printf "%b" "Remote system is \"${BLUE}${ARGUMENT}${RESET}\"\n" > ${DEST}
	printf "%b" "${ARGUMENT}\n" > "${TEMP_REM_SYS_LIST}"
else
	printf "%b" "Target is a list of hosts.\n" > ${DEST}
	printf "%b" "Remote system list \"${BLUE}${ARGUMENT}${RESET}\" validated.\n" > ${DEST}
	printf "%b" "Parsing hosts list...\n" > ${DEST}
	while read -r LINE ; do
		STRIPPED_LINE="$(printf "%b" "${LINE}\n" | cut -d "#" -f 1)"
		if [ "${STRIPPED_LINE}" ]; then printf "%b" "${STRIPPED_LINE}\n" >> "${TEMP_REM_SYS_LIST}"; fi
	done < "${ARGUMENT}"
	printf "%b" "File \"${BLUE}${ARGUMENT}${RESET}\" contains the following list of hosts:\n" > ${DEST}
	cat ${TEMP_REM_SYS_LIST} > ${DEST}
fi

######### Loop through the remote system list.

printf "%b" "\nBeginning apt-get commands on remote hosts...\n" > ${DEST}
{
	printf "%b" "$(TIMESTAMP_f) [√] Script initiated.  Will attempt upgrades for the following host/s:\n"
	cat "${TEMP_REM_SYS_LIST}"
} >> "${APT_ALL_LOG_FILE}"

while read -r REM_SYS <&2; do	## Loop to repeat commands for each file name entry in the backup file list ($BU_FILE_LIST).
				## <&2 needed as descriptor for nested while read loops (while read loop within called script).

	printf "%b" "${SEPARATOR}" >> "${APT_ALL_LOG_FILE}"
	printf "%s%-$((TABLE_WIDTH-2))s%s" "${BOLD}║" "${REM_SYS}" "║${RESET}\n" >> "${TEMP_SUMMARY_FILE}"
	printf "%b" "\nCurrent host:\t\t${BLUE}${REM_SYS}${RESET}\n"

	###### Attempt connection.
	printf "%b" "Testing ssh connection: ${BLUE}${REM_SYS}${RESET}\n" > ${DEST}
	if [ ${QUIET} = false ]; then printf "%b" "${BOLD}ssh connection...\t${RESET}"; fi
	if ! ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "exit" > /dev/null 2>&1; then
		{
			printf "%s%-$((TABLE_WIDTH-2))s%s" "${BOLD}║${RED}" "System not found." "${RESET}${BOLD}║${RESET}\n"
			printf "%s%-$((TABLE_WIDTH-2))s%s" "${BOLD}║${RESET}" "Skipped." "${BOLD}║${RESET}\n"
			printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
		} >> "${TEMP_SUMMARY_FILE}"
		if [ ${QUIET} = false ]; then printf "%b" "${RED}Error.${RESET} Skipping host.\n"; fi
		printf "%b" "$(TIMESTAMP_f) [X] Host: ${REM_SYS} - Failed ssh connection\n" >> "${APT_ALL_LOG_FILE}"
		continue
	else
		{
			printf "%s%-$((TABLE_WIDTH-2))s%s" "${BOLD}║${GREEN}" "System present." "${RESET}${BOLD}║${RESET}\n"
			printf "%s%-$((TABLE_WIDTH-2))s%s" "${BOLD}║${RESET}" "Running apt-get commands:" "${BOLD}║${RESET}\n"
		} >> "${TEMP_SUMMARY_FILE}"	## Record success.
		if [ ${QUIET} = false ]; then printf "%b" "${GREEN}Success.${RESET}\n"; fi
		printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Successful ssh connection.\n" >> "${APT_ALL_LOG_FILE}"
	fi

	###### Attempt update.
	if [ ${QUIET} = false ]; then printf "%b" "${BOLD}update... \t\t${RESET}"; fi
	if ! ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "${REM_PATH_DEF} sudo apt-get ${APT_GET_VERBOSITY} --assume-yes update" > ${DEST}; then
		{
			printf "%s%$((TABLE_WIDTH-16))s%s" "${BOLD}║${RESET}apt-get update${RED}" "Failure." "${RESET}${BOLD}║${RESET}\n"
			printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
		} >> "${TEMP_SUMMARY_FILE}"	## Record failure.
		if [ ${QUIET} = false ]; then printf "%b" "${RED}Error.${RESET} Skipping...\n"; fi
		printf "%b" "$(TIMESTAMP_f) [X] Host: ${REM_SYS} - Failed apt-get update.\n" >> "${APT_ALL_LOG_FILE}"
		continue			## Skip to the next system in the list.
	else
		printf "%s%$((TABLE_WIDTH-16))s%s" "${BOLD}║${RESET}apt-get update${GREEN}" "Success." "${RESET}${BOLD}║${RESET}\n" >> "${TEMP_SUMMARY_FILE}"
		if [ ${QUIET} = false ]; then printf "%b" "${GREEN}Success.${RESET}\n"; fi
		printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Successful apt-get update.\n" >> "${APT_ALL_LOG_FILE}"
	fi

	###### Use apt to check if any packages can be upgraded.
	NEW=$(ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "${REM_PATH_DEF} sudo apt list --upgradable --quiet=2")
	if [[ ! ${NEW} ]]; then
		{
			printf "%s%$((TABLE_WIDTH-13))s%s" "${BOLD}║${RESET}Up-to-date.${GREEN}" "Skipped." "${RESET}${BOLD}║${RESET}\n"
			printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
		} >> "${TEMP_SUMMARY_FILE}"
		if [ ${QUIET} = false ]; then printf "%b" "${BOLD}Up-to-date.\t\t${RESET}${GREEN}Skipping...${RESET}\n"; fi
		printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Packages are up-to-date.\n" >> "${APT_ALL_LOG_FILE}"
		continue
	else
		###### Attempt dist-upgrade.
		if [ ${QUIET} = false ]; then printf "%b" "${BOLD}dist-upgrade... \t${RESET}"; fi
		if ! ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "${REM_PATH_DEF} sudo apt-get ${APT_GET_VERBOSITY} --assume-yes --show-progress dist-upgrade" > ${DEST}; then
			{
				printf "%s%$((TABLE_WIDTH-22))s%s" "${BOLD}║${RESET}apt-get dist-upgrade${RED}" "Failure." "${RESET}${BOLD}║${RESET}\n"
				printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
			} >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${RED}Error.${RESET} Skipping...\n"; fi
			printf "%b" "$(TIMESTAMP_f) [X] Host: ${REM_SYS} - Failed apt-get dist-upgrade.\n" >> "${APT_ALL_LOG_FILE}"
			continue
		else
			printf "%s%$((TABLE_WIDTH-22))s%s" "${BOLD}║${RESET}apt-get dist-upgrade${GREEN}" "Success." "${RESET}${BOLD}║${RESET}\n" >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${GREEN}Success.${RESET}\n"; fi
			printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Successful apt-get dist-upgrade.\n" >> "${APT_ALL_LOG_FILE}"
		fi

		###### Attempt autoremove.
		if [ ${QUIET} = false ]; then printf "%b" "${BOLD}autoremove... \t\t${RESET}"; fi
		if ! ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "${REM_PATH_DEF} sudo apt-get ${APT_GET_VERBOSITY} --assume-yes --show-progress autoremove" > ${DEST}; then
			{
				printf "%s%$((TABLE_WIDTH-20))s%s" "${BOLD}║${RESET}apt-get autoremove${RED}" "Failure." "${RESET}${BOLD}║${RESET}\n"
				printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
			} >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${RED}Error.${RESET} Skipping...\n"; fi
			printf "%b" "$(TIMESTAMP_f) [X] Host: ${REM_SYS} - Failed apt-get autoremove.\n" >> "${APT_ALL_LOG_FILE}"
			continue
		else
			printf "%s%$((TABLE_WIDTH-20))s%s" "${BOLD}║${RESET}apt-get autoremove${GREEN}" "Success." "${RESET}${BOLD}║${RESET}\n" >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${GREEN}Success.${RESET}\n"; fi
			printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Successful apt-get autoremove.\n" >> "${APT_ALL_LOG_FILE}"
		fi

		###### Attempt autoclean.
		if [ ${QUIET} = false ]; then printf "%b" "${BOLD}autoclean... \t\t${RESET}"; fi
		if ! ssh "${SSH_OPTIONS[@]}" "${REM_SYS}" "${REM_PATH_DEF} sudo apt-get ${APT_GET_VERBOSITY} --assume-yes autoclean" > ${DEST}; then
			{
				printf "%s%$((TABLE_WIDTH-19))s%s" "${BOLD}║${RESET}apt-get autoclean${RED}" "Failure." "${RESET}${BOLD}║${RESET}\n"
				printf "%b" "${BOLD}╠$(FILL_H_f $((TABLE_WIDTH-2)))╣${RESET}\n"
			} >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${RED}Error.${RESET} Skipping...\n"; fi
			printf "%b" "$(TIMESTAMP_f) [X] Host: ${REM_SYS} - Failed apt-get autoclean.\n" >> "${APT_ALL_LOG_FILE}"
			continue
		else
			{
				printf "%s%$((TABLE_WIDTH-19))s%s" "${BOLD}║${RESET}apt-get autoclean${GREEN}" "Success." "${RESET}${BOLD}║${RESET}\n" >> "${TEMP_SUMMARY_FILE}"
				printf "%s╠$(FILL_H_f $((TABLE_WIDTH-2)))╣%s\n" "${BOLD}" "${RESET}"
			} >> "${TEMP_SUMMARY_FILE}"
			if [ ${QUIET} = false ]; then printf "%b" "${GREEN}Success.${RESET}\n"; fi
			printf "%b" "$(TIMESTAMP_f) [√] Host: ${REM_SYS} - Successful apt-get autoclean.\n" >> "${APT_ALL_LOG_FILE}"
		fi
	fi
done 2< "${TEMP_REM_SYS_LIST}"

printf "%b" "${SEPARATOR}" >> "${APT_ALL_LOG_FILE}"	## Break up each host in the log file.

######### Print out in a pretty format a table indicating the success or failure for each host in the list.
printf "%b" "\n${BOLD}╔═Summary:$(FILL_H_f $((TABLE_WIDTH-11)))${RESET}╗\n"
while read -r RESULT ; do
	printf "%b" "${RESULT}\n"
done < "${TEMP_SUMMARY_FILE}"
printf "%b%-$((TABLE_WIDTH-2))s%b" "${BOLD}║${RESET}" "Script complete." "${BOLD}║${RESET}\n"
printf "%b" "${BOLD}╚$(FILL_H_f $((TABLE_WIDTH-2)))╝${RESET}\n\n"

######### Clean up.
rm "${TEMP_SUMMARY_FILE}" "${TEMP_REM_SYS_LIST}"
QUIT_f "${SUCCESS}"
