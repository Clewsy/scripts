#!/bin/bash
#: Title:       : polly
#: Author       : clewsy (clews.pro)
#: Description  : Poll a url and check for successful response code 200.
#:              : Logs results and provides visual status indication via a
#:              : blink(1) device on a USB port.  Intended to be run as a cron
#:              : job, for example to run every 5 minutes:
#:              : */5 * * * * /usr/local/sbin/polly
#:
#: Options      : -p    Poll url and check status.  This is the primary function
#:              :       of the script.
#:              : -s    Show last Status.  Effectively displays the last entry
#:              :       in the log file.  Does not run a new poll operation.
#:              : -l    Show Log file.  Effectively dumps the contents of the
#:              :       entire log file to stdout.
#:              : -r    Reset status.  Allows resetting from "RECOVERED" to "OK"
#:              :       (assuming new poll returns "OK", not "FAILED").
#:              : -v    Verbose mode.  Shows additional output.
#:              : -h    Help.  Print usage information.
#:
#: Notes        : For long-term deployment, consider configuring and deploying a
#:              : logrotate file.  For example:
#:
#:              : #/etc/logrotate.d/polly
#:              : /var/log/polly.log {
#:              :   su root root
#:              :   monthly
#:              :   rotate 12
#:              :   compress
#:              :   missingok
#:              :   notifempty
#:              :   create 644 root root
#:              : }

## Exit codes.
SUCCESS=0
BAD_LOGFILE=1
BAD_OPTION=2
BAD_ARGUMENT=3
NO_CURL=4

HOST_URL="https://clews.pro"    ## Host url or ip address to poll.

LOG_FILE="/var/log/polly.log"   ## Log file location.

DEST="/dev/null"                ## Default output destination.
CURL_VERBOSITY="--silent"       ## Default option for use with curl command.

## Colour codes for the blink1-tool
BLINK_RED="--red"
BLINK_ORANGE="--rgb=255,165,0"
BLINK_GREEN="--green"
BLINK_BLUE="--blue"
BLINK_FLASH="--flash 1000"

## Path of the blink1-tool executable.
BLINK1_TOOL_PATH="/usr/local/sbin/blink1-tool"

## Datestamp function.  Displays similar to the default but in 24-hour format.
TIMESTAMP_f() { date +"%Y-%m-%d %T"; }

## Notifications handling function.
NOTIFICATION_f() {

    ## Kill any current running blink routines.
    pkill ${BLINK1_TOOL_PATH##*/}

    ## Determine desired colour and flashing status.
    case "${1}" in
        START)      COLOUR=${BLINK_BLUE};   FLASH="" ;;
        FAILED)     COLOUR=${BLINK_RED};    FLASH=${BLINK_FLASH} ;;
        RECOVERED)  COLOUR=${BLINK_ORANGE}; FLASH="" ;;
        OK)         COLOUR=${BLINK_GREEN};  FLASH="" ;;
    esac

    ## Run the blink command.
    ${BLINK1_TOOL_PATH} "${COLOUR}" "${FLASH}" > ${DEST}
}

## stdout output text colours.
RED="\033[02;31m"
ORANGE="\033[02;33m"
GREEN="\033[02;32m"
BOLD="\033[01;37m"
RESET="\033[0m"

## Script usage.
USAGE="
${0##*/} will poll a defined URL (${HOST_URL}) and log the result.

Usage: ${0##*/} [option]
Valid options:
-p    Standard poll: check site status, show & log the result.
-s    Show the current status (i.e. result of last poll).
-l    Show the full log.
-r    Reset the recovered flag.
-v     Verbose output.
-h    Show help.
<none>    Same as -p, standard poll.
"

## Parse selected options.
while getopts 'pslrvh' OPTION; do
    case "${OPTION}" in
        p)  ;;
        s)  printf "%b" "Fetching current status (last poll result):\n"
            if ! tail -n -1 ${LOG_FILE} 2>/dev/null; then
                printf "%b" "${RED}Error${RESET}, logfile (${LOG_FILE}) is not accessible.  Quitting...\n"
                exit ${BAD_LOGFILE}
            fi
            exit ${SUCCESS} ;;
        l)  printf "%b" "Printing log file (${LOG_FILE}):\n"
            cat "${LOG_FILE}"
            exit ${SUCCESS} ;;
        r)  POLLY_RESET="true" ;;
        v)  DEST="/dev/stdout"
            CURL_VERBOSITY="" ;;
        h)  printf "%b" "${USAGE}\n"
            exit ${SUCCESS} ;;
        ?)  echo -e "${USAGE}"
            exit ${BAD_OPTION} ;;
    esac
done
shift $((OPTIND -1))

## No arguments are expected, so ensure none have been given.
printf "%b" "\nEnsuring no arguments were provided...\n" > ${DEST}
if (( $# > 0 )); then
    printf "%b" "${RED}Unexpected argument.${RESET}\n ${USAGE}\n"
    exit ${BAD_ARGUMENT}
fi

## Verify that curl is installed.
printf "%b" "\nChecking for curl...\n" > ${DEST}
if ! command -v curl > ${DEST}; then
    printf "%b" "${RED}Error${RESET}, curl is not installed.  Quitting...\n"
    exit ${NO_CURL}
fi

## Ensure the logfile location exists and is writable.
printf "%b" "\nEnsuring logfile directory exists...\n" > ${DEST}
if [ ! -d "${LOG_FILE%/*}" ]; then
    printf "%b" "Logfile directory doesn't exist.  Will attempt to create...\n" > ${DEST}
    if ! mkdir "${LOG_FILE%/*}" &> ${DEST}; then
        printf "%b" "${RED}Error${RESET}, cannot create logfile directory.  Quitting...\n"
        exit ${BAD_LOGFILE}
    fi
printf "%b" "\nEnsuring logfile is writable...\n" > ${DEST}
elif [[ ! -w ${LOG_FILE%/*} || -e ${LOG_FILE} && ! -w ${LOG_FILE} ]]; then
    printf "%b" "${RED}Error${RESET}, logfile (${LOG_FILE}) is not writable.  Quitting...\n"
    exit ${BAD_LOGFILE}
fi


############ Main script functionality.

## Run a command to indicate the script is initiating.
printf "%b" "\nRunning script-start notification function...\n" > ${DEST}
NOTIFICATION_f "START" &
sleep 1s    ## 1s delay for effect and to allow completion of command/s.

## Check for the RESET flag.
if [[ -n "$POLLY_RESET" ]]; then
    printf "%b" "\nClearing warning to reset site poll status.\n"
    printf "%b" "$(TIMESTAMP_f) - Site status reset.\n" >> $LOG_FILE
fi

## Attempt to curl the url and obtain the response code for $(HOST_URL).
printf "%b" "\nAttempting to poll site (${HOST_URL}) with curl...\n" > ${DEST}
TEST_RESULT=$(curl "${CURL_VERBOSITY}" --output /dev/stdout --write-out '%{http_code}' "${HOST_URL}" | tail --lines 1)
printf "%b" "\nSite response code: ${BOLD}${TEST_RESULT}${RESET}\n" > ${DEST}

## A site response code of 200 indicates everything is okay.
if [ "${TEST_RESULT}" != 200 ]; then    ## Site is down.
    printf "%b" "\n${RED}FAILURE${RESET} - Site down!\n\n"
    printf "%b" "$(TIMESTAMP_f) - FAILURE - Site not available. Curl returned ${TEST_RESULT}\n" >> $LOG_FILE
    printf "%b" "Running failure notification function...\n\n" > ${DEST}
    NOTIFICATION_f "FAILED" &
else
    printf "%b" "\nChecking last poll result recorded in log file...\n"
    if tail --lines 1 ${LOG_FILE} | grep -e "FAILURE" -e "WARNING" >> ${DEST}; then
        printf "%b" "\n${ORANGE}WARNING${RESET} - Site has recovered from downtime, but everything seems okay now.\n\n"
        printf "%b" "$(TIMESTAMP_f) - WARNING - Site running but has recovered from downtime.\n" >> $LOG_FILE
        printf "%b" "Running recovered notification function...\n\n" > ${DEST}
        NOTIFICATION_f "RECOVERED" &
    else    ## Site is up.
        printf "%b" "\n${GREEN}SUCCESS${RESET} - Everything seems okay.\n\n"
        printf "%b" "$(TIMESTAMP_f) - SUCCESS - Site is up, everything seems okay.\n" >> $LOG_FILE
        printf "%b" "Running success notification command...\n\n" > ${DEST}
        NOTIFICATION_f "OK" &
    fi
fi
