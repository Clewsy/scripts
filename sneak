#!/bin/bash
#: Title        : sneak
#: Author       : clewsy (clews.pro)
#: Description  : Use rsync to pull the contents of a directory on a remote
#:              : machine to the local machine.  Intended to be ran as a cronjob
#:              : so that the sync can be offset from peak usage where bandwidth
#:              : is limited.  Example crontab entry:
#:              : 0 2 * * * /home/user/bin/sneak -v # run sneak daily @ 0200hrs.
#: Options      : -v : Verbose mode (show additional output).
#:              : -h : Help (print usage information).

########## Configurable settings. Override SOURCE and TARGET with ${1} and ${2}.
SOURCE="amy:/home/jc/transfer/"         ## E.g. user@host:/path/to/dir/ or
TARGET="/home/${USER}/transfer/"        ## host:/path/to/dir/ or /path/to/dir/ 
RATE_LIMIT="100"                        ## E.g. "100" for 100K, "1.5m" for 1.5M.
SNEAK_LOG_FILE="${HOME}/.log/sneak.log" ## Must be writable.

########## Exit codes
SUCCESS=0       ## Noice.
BAD_LOGFILE=1   ## Unable to write or create the logfile.
BAD_OPTION=2    ## Invalid option.
ONLY_ONE_ARG=3  ## Incorrect usage.
TOO_MANY_ARGS=4 ## Incorrect usage.
NO_RSYNC=5      ## rsync not installed.
RSYNC_FAILED=6  ## rsync returned non-zero.

########## Default output destination.  Redirected by -v option.
DEST="/dev/null"

########## Function to print current date and time.  Used for logging.
TIMESTAMP_f () { date +%Y/%m/%d\ %T; }

########## Function for exit conditions.  Log error or success and exit.
QUIT_f ()
{
    if [ "${1}" -gt 0 ]
        then printf "%b%d%b" "$(TIMESTAMP_f) [${$}] Script failed with error code " "${1}" ".\n" | tee -a "${SNEAK_LOG_FILE}"
        else printf "%b"     "$(TIMESTAMP_f) [${$}] Sync completed successfully.\n" | tee -a "${SNEAK_LOG_FILE}" >> ${DEST} 
    fi
    exit "${1}"
}

########## Usage/help.  Ouput by using -h option.
USAGE="
Usage examples:

## Manual use requires definition of both source and target.
${0##*/} <options> [source] [target]

## Alternatively use the default source and target as defined in the script.
${0##*/} <options>

Valid options:
    -v : Verbose mode - print additional info to stdout.
    -h : Print this usage and exit.  Arguments will be ignored.

Exit codes:
    0 : Script completed successfully.
    1 : Unable to create or write to the log file.
    2 : Invalid option used.
    3 : Incorrect usage (only one argument).
    4 : Incorrect usage (more than two arguments).
    5 : Cannot find or execute rsync.
    6 : rsync returned an error (e.g. script cancelled before completion).
"
########## Ensure log file exists and is writable.
if [ ! -w "${SNEAK_LOG_FILE}" ] && ! touch "${SNEAK_LOG_FILE}"; then
    printf "%b" "Error: Unable to create/write to the logfile (${SNEAK_LOG_FILE})\n"
    exit "${BAD_LOGFILE}"
    ## Use exit, not QUIT_f here because it will try to write to the log file.
fi

########## Interpret options
while getopts 'hv' OPTION; do ## Call getopts to identify options and set flags.
    case "${OPTION}" in
        h)  printf "%b" "${USAGE}\n"
            QUIT_f "${SUCCESS}" ;;
        v)  DEST="/dev/stdout" ;;
        ?)  printf "%b" "Error: Invalid option/s.\n${USAGE}\n"
            QUIT_f "${BAD_OPTION}" ;;
    esac
done
shift $((OPTIND -1))    ## This ensures only non-option arguments are considered
                        ## arguments when referencing $#, #* and $n.

######### Validate provided argument/s.
case "$#" in
    0)  printf "%b" "Using default source and target:\n" >> ${DEST};;
    1)  printf "%b" "Error: Must define both source and target.\n${USAGE}\n"
        QUIT_f "${ONLY_ONE_ARG}" ;;
    2)  SOURCE=${1}
        TARGET=${2} ;;
    ?)  printf "%b" "Error: Too many arguments.\n${USAGE}\n"
        QUIT_f "${TOO_MANY_ARGS}" ;;
esac
{
    printf "%b" "\tSource: ${SOURCE}\n"
    printf "%b" "\tTarget: ${TARGET}\n"
} >> ${DEST}

########## Ensure rsync is installed.
RSYNC_LOCATION="$(command -v rsync)"
if [ -n "${RSYNC_LOCATION}" ];
    then printf "%b" "Location of rsync executable: ${RSYNC_LOCATION}.\n" >> ${DEST}
    else printf "%b" "Error: rsync is not installed.\n" >> ${DEST}; QUIT_f "${NO_RSYNC}"
fi

########## Set ssh options to be used by the rsync connection.
SSH_OPTIONS=(    
#    -4
    "-o StrictHostKeyChecking=no"
    "-o UserKnownHostsFile=/dev/null"
    "-o LogLevel=ERROR"
    "-o BatchMode=yes"
    "-o ConnectTimeout=15"
)
RSYNC_SHELL="ssh ${SSH_OPTIONS[*]}" ## For inserting into the rsync command
                                    ## with the remote shell ("--rsh=") option.
printf "%b" "Options for ssh:\n\t${SSH_OPTIONS[*]}\n" >> ${DEST}

########## Set rsync options.
RSYNC_OPTIONS=(
    "--bwlimit=${RATE_LIMIT}"       
    "--progress"                    
    "--verbose"                     
    "--human-readable"              
    "--partial-dir=.partial"        
    "--log-file=${SNEAK_LOG_FILE}"  
    "--archive"                     
)                                   
printf "%b" "Options for rsync:\n\t${RSYNC_OPTIONS[*]}\n" >> ${DEST}

########## Actually run rsync.
printf "%b" "$(TIMESTAMP_f) [${$}] Beginning sync.\n" | tee -a "${SNEAK_LOG_FILE}"
if rsync "${RSYNC_OPTIONS[@]}" --rsh="${RSYNC_SHELL}" "${SOURCE}" "${TARGET}"
    then QUIT_f "${SUCCESS}"
    else printf "%b" "Error: rsync failed.\n" && QUIT_f "${RSYNC_FAILED}"
fi
