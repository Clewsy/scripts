#!/bin/bash
#: Title:	: sneak
#: Author	: clewsy (clews.pro)
#: Description	: Use rsync to pull the contents of a directory on a remote machine to the local machine.
#:              : Intended to be ran as a cronjob so that the sync can be offset from peak usage where bandwidth is limited.
#:		: 0 2 * * * /home/user/bin/sneak -v	# Example crontab entry to run sneak every day at 0200 hours.
#: Options	: -v - Verbose mode (show additional output).
#:		: -h - Help (print usage information).

########## Configurable settings.  SOURCE and TARGET can be overridden by arguments ${1} and ${2}.
SOURCE="amy:/home/jc/transfer/"		## Format: user@host:/path/to/dir/ or host:/path/to/dir/ or /path/to/dir/
TARGET="/home/clewsy/transfer/"		## Format: As above.
RATE_LIMIT="100"			## Format: e.g. "100" for 100K, "1.5m" for 1.5M.
SNEAK_LOG_FILE="${HOME}/.log/sneak.log"	## Must be writable.

########## Exit codes
SUCCESS=0	## Noice.
BAD_LOGFILE=1	## Unable to write or create the logfile.
BAD_OPTION=2	## Invalid option.
ONLY_ONE_ARG=3	## Incorrect usage.
TOO_MANY_ARGS=4	## Incorrect usage.
NO_RSYNC=5	## rsync not installed.
RSYNC_FAILED=6	## rsync returned non-zero.

########## Default output destination.  Direct to /dev/null by default unless overridden with -v option for verbose mode.
DEST="/dev/null"

########## Function to print current date and time.  Used for logging.
TIMESTAMP_f () { date +%Y/%m/%d\ %T; }

########## Function for exit conditions.  Log error or success and exit.
QUIT_f ()
{
	if [ "${1}" -gt 0 ]
		then printf "%b%d%b"	"$(TIMESTAMP_f) ######### Script failed with error code " "${1}" ".\n" | tee -a "${SNEAK_LOG_FILE}"
		else printf "%b"	"$(TIMESTAMP_f) ######### Sync completed successfully.\n" | tee -a "${SNEAK_LOG_FILE}"
	fi
	exit "${1}"
}

########## Usage/help.  Ouput by using -h option.
USAGE="
Usage examples:

${0##*/} <options> [source] [target]	## Manual use requires definition of both source and target.  Alternatively;
${0##*/} <options>			## Use the default source and target as defined in the script.

Valid options:
	-v	Verbose mode - print additional info to stdout.
	-h	Print this usage and exit.  Arguments will be ignored.
"
########## Ensure log file exists and is writable.
if [ ! -w "${SNEAK_LOG_FILE}" ] && ! touch "${SNEAK_LOG_FILE}"; then
	printf "%b" "Error: Unable to create/write to the logfile (${SNEAK_LOG_FILE})\n"
	exit "${BAD_LOGFILE}"	## Don't use QUIT_f here because it will try to write to the log file.
fi

########## Interpret options
while getopts 'hv' OPTION; do				## Call getopts to identify selected options and set corresponding flags.
	case "${OPTION}" in
		h)	printf "%b" "${USAGE}\n"	## -h option just prints the usage then quits.
			QUIT_f "${SUCCESS}" ;;		## Exit successfully.
		v)	DEST="/dev/stdout" ;;		## -v activates verbose mode by sending output to /dev/stdout.
		?)	printf "%b" "Error: Invalid option/s.\n${USAGE}\n"	## Invalid option, show usage.
			QUIT_f "${BAD_OPTION}" ;;	## Exit with error.
	esac
done
shift $((OPTIND -1))	## This ensures only non-option arguments are considered arguments when referencing $#, #* and $n.

######### Validate provided argument/s.
case "$#" in
	0)	printf "%b" "Using default source and target:\n" >> ${DEST};;
	1)	printf "%b" "Error: Must define both source and target.\n${USAGE}\n"
		QUIT_f "${ONLY_ONE_ARG}" ;;
	2)	SOURCE=${1}
		TARGET=${2} ;;
	?)	printf "%b" "Error: Too many arguments.\n${USAGE}\n"
		QUIT_f "${TOO_MANY_ARGS}" ;;
esac
{
	printf "%b" "\tSource: ${SOURCE}\n"
	printf "%b" "\tTarget: ${TARGET}\n"
} >> ${DEST}

########## Ensure rsync is installed.
RSYNC_LOCATION="$(command -v rsync)"
if [ -n "${RSYNC_LOCATION}" ];
	then printf "%b" "Location of rsync executable: ${RSYNC_LOCATION}.\n" >> ${DEST}
	else printf "%b" "Error: rsync is not installed.\n" >> ${DEST}; QUIT_f "${NO_RSYNC}"
fi

########## Set ssh options to be used by the rsync connection.
SSH_OPTIONS=(	
#	-4					## Use IPV4 (alternatively, -6 for IPV6).
	"-o StrictHostKeyChecking=no"		## Disable user verification for connecting to unknown (not yet authenticated) host.
	"-o UserKnownHostsFile=/dev/null"	## Disable automatically saving "newly discovered" hosts to the known_hosts file.
	"-o BatchMode=yes"			## Disable password prompts and host key confirmation requests.
	"-o ConnectTimeout=15"			## Stop attempting the connection after specified number of seconds.
)
RSYNC_SHELL="ssh ${SSH_OPTIONS[*]}"		## For inserting into the rsync command with the remote shell ("--rsh=") option.
printf "%b" "Options for ssh:\n\t${SSH_OPTIONS[*]}\n" >> ${DEST}

########## Set rsync options.
RSYNC_OPTIONS=(
	"--bwlimit=${RATE_LIMIT}"		## Set the max bandwidth that rsync will use.
	"--progress"				## Output info about current transfer status and progress.
	"--verbose=3"				## Output extra information.
	"--human-readable"			## Numbers output (e.g. progress info) are easily readable.
	"--partial-dir=.partial"		## Define directory to store partially transferred files.
	"--log-file=${SNEAK_LOG_FILE}"		## Define the logfile.
	"--archive"				## Archive mode.  Equivalent to -rlptgoD.
)						#### -r or --recursive	: Sync diectories, sub-directories and all contents.
						#### -l or --links	: Symlinks are copied as symlinks.
						#### -p or --perms	: File/directory permissions are preserved.
						#### -t or --times	: File/directory creation/modification times are preserved.
						#### -g or --group	: File/directory groups are preserved.
						#### -o or --owner	: File/directory owners are preserved (root only).
						#### -D			: Equivalent to --devices --specials
						######	--devices	: Sync character and block device files (root only).
						######	--specials	: Sync special files (e.g. named sockets and fifos).
printf "%b" "Options for rsync:\n\t${RSYNC_OPTIONS[*]}\n" >> ${DEST}

########## Actually run rsync.
printf "%b" "$(TIMESTAMP_f) ######### Beginning sync.\n" | tee -a "${SNEAK_LOG_FILE}"
if rsync "${RSYNC_OPTIONS[@]}" --rsh="${RSYNC_SHELL}" "${SOURCE}" "${TARGET}"
	then QUIT_f "${SUCCESS}"
	else printf "%b" "Error: rsync failed.\n" && QUIT_f "${RSYNC_FAILED}"
fi
