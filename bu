#!/bin/bash
#: Title:       : ball
#: Author       : clewsy (clews.pro)
#: Description  : Uses rsync to back-up a file or a list of files to a
#:              : specified remote machine.
#: Options      : -d    Back up a directory.
#:              : -f    Back up a file.
#:              : -h    Help (print usage information).
#:              : -l    Back up a list of files and/or directorys specified
#:              :       in a text file list.
#:              : -q    Quiet mode (suppress most output).
#:              : -v    Verbose mode (show additional output).
#:              : none  Assumes -l.

##########Exit codes
SUCCESS="0"         ## Noice.
BAD_LOGFILE="1"     ## Cannot write to log file.
BAD_OPTION="2"      ## Incorrect usage.
TOO_MANY_ARGS="3"   ## More than one argument was provided.
MISSING_ARG="4"     ## Option -f or -d used but argument was not provided.
BAD_ARG="5"         ## Specified or default file list not readable.
NO_RSYNC="6"        ## rsync not available.
NO_CONNECTION="7"   ## Unable to connect to local or remote server using ssh.
NO_REM_DIR="8"      ## ssh command to create remote directory failed.
BAD_LIST_FILE="9"   ## List file not identified as ascii text file.
NO_VALID_FILES="10" ## Parsing list file  found no valid files to back up.
RSYNC_FAILED="11"   ## rsync command was reached but failed.

##########Configurable settings.
BU_USER="b4t"
BU_SERVER_LOCAL="seymour"
BU_SERVER_REMOTE="clews.pro"
BU_REMOTE_DIR="/home/${BU_USER}/file_cache/${HOSTNAME}"

##########Colours and formatting.
RED="\033[02;31m"
GREEN="\033[02;32m"
BLUE="\033[01;34m"
RESET="\033[0m"
SEPARATOR="------------------------------------"

##########Define log file and ensure directory exists.
BU_LOG_FILE="${HOME}/.log/bu.log"
if [ ! -w "${BU_LOG_FILE%/*}" ]; then
    if ! mkdir --parents "${BU_LOG_FILE%/*}" || ! touch "${BU_LOG_FILE}"; then
        printf "%b" "${RED}Error:${RESET} Unable to create/write to the logfile (${BU_LOG_FILE})\n";
        exit "${BAD_LOGFILE}";    ## Not QUIT_f because it needs the logfile.
    fi
fi

##########Function to print current date and time.  Used for logging.
TIMESTAMP_f () { date +%Y-%m-%d\ %T; }

##########Function for exit conditions.  Log error or success and exit.
QUIT_f ()
{
    if [ "${1}" -gt 0 ]; then    printf "%b%d%b" "$(TIMESTAMP_f) - Script failed with error code " "${1}" ".\n" >> "${BU_LOG_FILE}"
    else                printf "%b" "$(TIMESTAMP_f) - Script exited successfully.\n" >> "${BU_LOG_FILE}"; fi
    printf "%b" "${SEPARATOR}${SEPARATOR}\n" >> "${BU_LOG_FILE}"
    exit "${1}"
}

##########Usage
USAGE="
Usage: ${0##*/} [option] [file/list]
Where [file/list] is either:
    file    : A specific file/directory to be backed up
              (requires option \"-f\" or \"-d\").
    list    : A text list of files and/or directories to be backed up.
Valid options:
    -f      : Argument is a specific file to be backed up.
    -d      : Argument is a specific directory to be backed up.
    -l      : Argument is a text file containing a list of file/directories.
    -q      : Quiet - suppress most output.
    -v      : Verbose - print additional info to stdout.
    -h      : Print this usage and exit.
    none    : No option entered - Default assumes \"-l\".
"

DEST="/dev/null"    ## Default destination for command output.

##########Interpret options
while getopts 'fdlqvh' OPTION; do
    case "$OPTION" in
        f)  ARGUMENT_TYPE="FILE";;
        d)  ARGUMENT_TYPE="FILE";;
        l)  ARGUMENT_TYPE="LIST";;
        q)  QUIET_MODE="TRUE";;
        v)  DEST="/dev/stdout";;
        h)  printf "%b" "${USAGE}\n"
            QUIT_f "${SUCCESS}";;
        ?)  printf "%b" "${RED}Error:${RESET} Invalid option/s.\n${USAGE}\n"
            QUIT_f "${BAD_OPTION}";;
    esac
done
shift $((OPTIND -1))

##########Check correct usage
printf "%b" "\nChecking usage:\n" > ${DEST}
## If more than one argument was entered.
if [ $# -gt 1 ]; then
    printf "%b" "${RED}Error:${RESET} Too many arguments.\n${USAGE}\n"
    QUIT_f "${TOO_MANY_ARGS}"
fi
## Expects file name but no argument entered.
if [ "${ARGUMENT_TYPE}" == "FILE" ] && [ $# -lt 1 ]; then
    printf "%b" "${RED}Error:${RESET} Missing argument.\n${USAGE}\n"
    QUIT_f "${MISSING_ARG}"
fi
printf "%b" "${GREEN}Confirmation:${RESET} Usage appears valid.\n" > ${DEST}

##########Validate argument
## If argument not provided, set default (bu.list in same dir as script).
ARGUMENT=${1-"${0%/*}/bu.list"}

printf "%b" "\nValidating argument:\n" > ${DEST}
if [ ! -e "${ARGUMENT}" ]; then ## If argument doesn't exist.
    printf "%b" "${RED}Error:${RESET} File \"${BLUE}${ARGUMENT}${RESET}\" does not exist.\n${USAGE}\n"
    QUIT_f "${BAD_ARG}"
fi
printf "%b" "${GREEN}Confirmation:${RESET} File \"${BLUE}${ARGUMENT}${RESET}\" appears valid.\n" > ${DEST}

##########Verify if rsync is installed.
printf "%b" "\nChecking for rsync:\n" > ${DEST}
if ! command -v rsync >> /dev/null; then
    printf "%b" "${RED}Error:${RESET} rsync not installed.\n\n"
    QUIT_f ${NO_RSYNC}
fi
printf "%b" "${GREEN}Confirmation:${RESET} rsync installed.\n" > ${DEST}

#########Define array of options to be used by ssh.
SSH_OPTIONS=(    
    -4
    '-o StrictHostKeyChecking=no'
    '-o UserKnownHostsFile=/dev/null'
    '-o BatchMode=yes'
    '-o ConnectTimeout=4'
)
## Set the RSYNC_RSH env variable so rsync uses the same options as the ssh.
export RSYNC_RSH="ssh ${SSH_OPTIONS[*]}"

printf "%b" "\nConfigured ssh options   : ${BLUE}${SSH_OPTIONS[*]}${RESET}\n" > ${DEST}

#########Define array of options to be used by rsync.
RSYNC_OPTIONS=(
    --archive    ## Archive mode, equivalent to -rlptgoD (no -H, -A, -X)
    --verbose
    --human-readable
    --progress
    --recursive
)
## Note using --archive is equivalent to:
##    -r --recursive
##    -l --links (copy symlinks as symlinks)
##    -p --perms (preserve permissions)
##    -t --times (preserve modification times)
##    -g --group (preserve group)
##    -o --owner (preserve owner when run as superuser)
##    -D --devices preserve device files when run as superuser)
printf "%b" "Configured rsync options : ${BLUE}${RSYNC_OPTIONS[*]}${RESET}\n" > ${DEST}

##########Determine server hostname (i.e. use local network or remote network).
printf "%b" "\nChecking for local or remote backup server availability.\n" > ${DEST}
if ssh "${SSH_OPTIONS[@]}" "${BU_USER}@${BU_SERVER_LOCAL}" "exit" > ${DEST} 2>&1; then
    BU_SERVER="${BU_SERVER_LOCAL}"
    printf "%b" "Using local server: ${BLUE}${BU_USER}${RESET}@${BLUE}${BU_SERVER}${RESET}\n" > ${DEST}
elif ssh "${SSH_OPTIONS[@]}" "${BU_USER}@${BU_SERVER_REMOTE}" "exit" > ${DEST} 2>&1; then
    BU_SERVER="${BU_SERVER_REMOTE}"
    printf "%b" "Using remote server: ${BLUE}${BU_USER}${RESET}@${BLUE}${BU_SERVER}${RESET}\n" > ${DEST}
else 
    printf "%b" "${RED}Error:${RESET} Unable to connect to either local (${BLUE}${BU_SERVER_LOCAL}${RESET}) or remote (${BLUE}${BU_SERVER_REMOTE}${RESET}) server.\n\n"
    QUIT_f ${NO_CONNECTION}
fi

##########Validate the backup folder or create if absent.
printf "%b" "\nChecking for remote backup directory \"${BLUE}${BU_REMOTE_DIR}${RESET}\" on remote backup server \"${BLUE}${BU_SERVER}${RESET}\" (will be created if absent).\n" > ${DEST}
if ! ssh "${SSH_OPTIONS[@]}" ${BU_USER}@${BU_SERVER} "mkdir -p ${BU_REMOTE_DIR}" > ${DEST} 2>&1; then
    printf "%b" "${RED}Error:${RESET} Failed to create remote directory \"${BLUE}${BU_REMOTE_DIR}${RESET}\".\n\n"
    QUIT_f ${NO_REM_DIR}
fi
printf "%b" "${GREEN}Confirmation:${RESET} Remote backup directory \"${BLUE}${BU_REMOTE_DIR}${RESET}\" validated.\n" > ${DEST}

##########Define and clear the temp list file.
TEMP_BU_FILE_LIST="/tmp/temp_bu_file_list"
> "${TEMP_BU_FILE_LIST}"

##########Fill the temp list file (i.e. validate, strip comments).
if [ "${ARGUMENT_TYPE}" == "FILE" ]; then   ## Expecting a file/directory name.
    ARGUMENT="$(readlink -f "${ARGUMENT}")"
    printf "%b" "\nBackup the following file: ${BLUE}${ARGUMENT}${RESET}\n" > ${DEST}
    echo "${ARGUMENT}" > "${TEMP_BU_FILE_LIST}"
else    ## Expecting a text list of files/directorys.
    if command -v file >> /dev/null && ! file "${ARGUMENT}" | grep "ASCII text" >> /dev/null; then
        printf "%b" "${RED}Error:${RESET} Bad backup list file (expecting ascii text file).\n${USAGE}\n"
        QUIT_f ${BAD_LIST_FILE}
    else    ## Need to parse the list.
        printf "%b" "\nBackup list is \"${BLUE}${ARGUMENT}${RESET}\". Checking files...\n" > ${DEST}
        printf "%b" "Raw file list:\n${SEPARATOR}\n${BLUE}$(cat "${ARGUMENT}")${RESET}\n${SEPARATOR}\n\n" > ${DEST}
        printf "%b" "Validating listed files and creating valid file list:\n"
        while read -r LINE ; do         ## Iterate for every line in the list.
            STRIPPED_LINE=${LINE%%\#*}  ## Strip comments.
            if [ "${STRIPPED_LINE}" ]; then    
                ## Expanded variable will be treated as a literal string.
                ## These next two commands evaluate first "~" and then "$HOME"
                ## then substitute either for the actual variable $HOME
                ## Syntax: ${variable/string_match/replacement}
                FULL_PATH=${STRIPPED_LINE/#\~/$HOME}
                FULL_PATH=${FULL_PATH/\$HOME/$HOME}
                for f in ${FULL_PATH}; do
                    if [ -e "${f}" ]; then
                        printf "%b" "${GREEN}Success:${RESET} Added ${BLUE}${f}${RESET}\n" > ${DEST}
                        printf "%b" "${f}\n" >> "${TEMP_BU_FILE_LIST}"
                    else    printf "%b" "${RED}Failure:${RESET} File/Directory ${BLUE}${f}${RESET} does not exist and will be skipped\n"; fi
                done
            fi
        done < "${ARGUMENT}"
        if [ ! -s "${TEMP_BU_FILE_LIST}" ]; then    ## If temp file is empty.
            printf "%b" "${RED}Error:${RESET} The list did not contain any valid files.\n${USAGE}\n"
            QUIT_f "${NO_VALID_FILES}";
        fi
    fi
fi

##########Run the sync.
{
    printf "%b" "$(TIMESTAMP_f) - Attempting rsync backup to ${BU_SERVER}...\n"
    printf "%b" "-------------File list:-------------\n$(cat ${TEMP_BU_FILE_LIST})\n${SEPARATOR}\n"
 } >> "${BU_LOG_FILE}"

if [ "${QUIET_MODE}" != "TRUE" ]; then printf "%b" "\nUsing rsync to copy listed files to \"${BLUE}${BU_USER}${RESET}@${BLUE}${BU_SERVER}${RESET}:${BLUE}${BU_REMOTE_DIR}/${RESET}\"\n"; fi
if ! rsync "${RSYNC_OPTIONS[@]}" --files-from="${TEMP_BU_FILE_LIST}" / "${BU_USER}@${BU_SERVER}:${BU_REMOTE_DIR}/" > ${DEST} 2>&1; then
    printf "%b" "${RED}Error:${RESET} Sync failed.\n\n"
    QUIT_f "${RSYNC_FAILED}"
else    
    printf "%b" "${GREEN}Success:${RESET} Sync complete.\n\n"            
fi

##########Delete the temp file.
rm "${TEMP_BU_FILE_LIST}"

##########All done.
printf "%b" "${GREEN}Success:${RESET} Script complete.\n\n" > ${DEST}
QUIT_f "${SUCCESS}"
